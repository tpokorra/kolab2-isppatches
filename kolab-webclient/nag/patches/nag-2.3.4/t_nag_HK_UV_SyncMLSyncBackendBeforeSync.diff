From: root <Gunnar Wrobel wrobel@pardus.de>
Subject: [PATCH] t/SyncML/HK/GW/DoubleSyncFix

Horde is currently agnostic of external clients to the storage backend used by
Horde/Kolab. For SyncML any storage changes need to get logged in order to be
exchanged with the mobile clients.

Currently the Kolab drivers within Horde will create the necessary changelog.
But this currently only happens after Synchronization started. Which means that
you need to sync twice in order to get changes from an external client if you
did not log in via Horde after changing something with an external client.

The attached patch has been provided by Univention but needs some cleanup to go
in upstream. We mainly need a clean library call in the Horde application
libraries that will be called for synchronization.

REF: https://issues.kolab.org/issue3237

Signed-off-by: root <Gunnar Wrobel wrobel@pardus.de>

diff --git a/lib/api.php b/lib/api.php
index 202b85e..1450bb1 100644
--- a/lib/api.php
+++ b/lib/api.php
@@ -113,6 +113,11 @@ $_services['listTimeObjects'] = array(
     'type' => '{urn:horde}hashHash'
 );
 
+$_services['synchronize'] = array(
+    'args' => array(),
+    'type' => 'boolean'
+);
+
 /**
  * Returns a list of available permissions.
  *
@@ -1386,3 +1391,32 @@ function _nag_listAlarms($time, $user = null)
 
     return $alarm_list;
 }
+
+/**
+ * Synchronizes nag with the IMAP backend
+ *
+ * @return boolean  False if something went wrong
+ */
+function _nag_synchronize()
+{
+    require_once dirname(__FILE__) . '/base.php';
+
+    $tasklist = Nag::getDefaultTasklist(PERMS_READ);
+
+    if (!array_key_exists($tasklist,
+                          Nag::listTasklists(false, PERMS_READ))) {
+        return False;
+    }
+
+    $storage = &Nag_Driver::singleton($tasklist);
+    if (get_class ($storage) == 'Nag_Driver_kolab' &&
+        get_class ($storage->_wrapper) == 'Nag_Driver_kolab_wrapper_new') {
+
+        $storage->_wrapper->connect ();
+        if (get_class ($storage->_wrapper->_store) == 'Kolab_IMAP') {
+            $storage->_wrapper->_store->_synchronize ();
+        }
+    }
+
+    return True;
+}
